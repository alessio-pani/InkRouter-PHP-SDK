{"name":"InkRouter-php-sdk","tagline":"PHP SDK for InkRouter","body":"Introduction\r\n============\r\n\r\nInkRouter's PHP SDK is the Job Submission interface to the InkRouter Printing Network. To send print orders directly from your website to InkRouter, you will use the InkRouter PHP SDK as documented here.\r\n\r\nThe InkRouter PHP SDK is a library for easy interaction with the InkRouter interface from PHP.\r\n\r\n[![Build Status](https://travis-ci.org/opensoft/InkRouter-PHP-SDK.svg?branch=master)](https://travis-ci.org/opensoft/InkRouter-PHP-SDK)\r\n\r\nRequirements\r\n============\r\n\r\nThis SDK requires: \r\n\r\n- PHP 5.0.x and up\r\n- libxml PHP extension\r\n\r\nInstallation\r\n============\r\n\r\nWith Composer:\r\n\r\n    $ composer require opensoft/inkrouter-php-sdk\r\n    \r\nWithout Composer:\r\n\r\n- Download a zip [file](https://github.com/opensoft/InkRouter-PHP-SDK/zipball/1.0)\r\n- Unpack downloaded zip in any directory in your project (for example /path/to/your/project/libs/InkRouter)\r\n- InkRouter PHP SDK can use any PSR0 compatible autoloader, or you can use the one included in `tests/bootstrap.php`\r\n  with a simple `require_once` statement\r\n\r\nInkRouter Workflow\r\n==================\r\n\r\nInkRouter interface workflow consists of 6 actions:\r\n\r\n- Get InkRouter client instance\r\n- Create and fill InkRouter_Models_OrderInfo instance\r\n- Create order to InkRouter\r\n- Update order (optional)\r\n- Place on hold order (optional)\r\n- Remove hold order (optional)\r\n- Cancel order (optional)\r\n- Receive order updates from InkRouter\r\n\r\nGet InkRouter client instance\r\n-----------------------\r\nPrior to performing any operations, perform get instance of InkRouter client, example:\r\n\r\n    $InkRouterClient = new InkRouter_Client_Client($wsdl, $printCustomerId, $secretKey);\r\n\r\nWhere:\r\n\r\n- `$wsdl` is url of InkRouter service\r\n- `$printCustomerId` is your unique identificator from InkRouter\r\n- `$secretKey` is your secret key\r\n\r\nCreate InkRouter_Models_OrderInfo instance (with example data)\r\n---------------------------------\r\n\r\n    $contact = new InkRouter_Models_Contact();\r\n    $contact->setName('contact_name')\r\n        ->setPhone('contact_phone')\r\n        ->setEmail('contact_email');\r\n\r\n    $headerInfo = new InkRouter_Models_HeaderInfo();\r\n    $headerInfo->setFromDomain('yoursite.com')\r\n        ->setFromIdentity('your_identity');\r\n\r\n    $shipType = new InkRouter_Models_ShipType();\r\n    $shipType->setMethod('UPS')\r\n        ->setServiceLevel('GROUND');\r\n\r\n    $shipAddress = new InkRouter_Models_ShipAddress();\r\n    $shipAddress->setAttention('Attention')\r\n        ->setStreetAddress('742 Evergreen Terrace')\r\n        ->setCity('Springfield')\r\n        ->setState('CA')\r\n        ->setZip('1234567')\r\n        ->setCountry('USA');\r\n\r\n    $requester = new InkRouter_Models_Requester();\r\n    $requester->setName('Any Prints')\r\n        ->setContract('STANDARD')\r\n        ->setPayTerm('FREE');\r\n\r\n    $poInfo = new InkRouter_Models_PoInfo();\r\n    $poInfo->setAgentId('agentId')\r\n        ->setCurrency('US');\r\n\r\n    $side = new InkRouter_Models_Side();\r\n    $side->setPageNumber(10)\r\n        ->setFileUrl('http://server/img.jpg')\r\n        ->setFileHash('0a0825909aa15a98b00574661f23aee7')\r\n        ->setCoating('NONE')\r\n        ->setOrientation('Landscape');\r\n\r\n    $attributes = new InkRouter_Models_Attributes_ScalarBooleanAttribute();\r\n        $attributes->setType('LABELING');\r\n        $attributes->setValue(true);\r\n            \r\n    $orderItem = new InkRouter_Models_OrderItem();\r\n    $orderItem->setPrintGroupId('pg4f7969f8a4811')\r\n        ->setProductType('business cards')\r\n        ->setPaperType('14PT')\r\n        ->setQuantity(500)\r\n        ->setRegionSize('US')\r\n        ->setCost(20.3)\r\n        ->addAttributes($attributes)\r\n        ->addSide($side);\r\n\r\n    $order = new InkRouter_Models_Order();\r\n    $order->setPrintCustomerInvoice(123456789)\r\n        ->setTsCreated(date(DATE_ATOM, strtotime('now')))\r\n        ->setPriority(0)\r\n        ->setShippingFee(10)\r\n        ->setProductDiscounts(0)\r\n        ->setShippingDiscounts(0)\r\n        ->setVendorId('vendor_id')\r\n        ->setContact($contact)\r\n        ->setShipType($shipType)\r\n        ->setRequester($requester)\r\n        ->setShipAddress($shipAddress)\r\n        ->addOrderItem($orderItem);\r\n\r\n    $orderInfo = new InkRouter_Models_OrderInfo();\r\n    $orderInfo->setHeaderInfo($headerInfo)\r\n        ->setPrintCustomerId('ID')\r\n        ->setPoInfo($poInfo)\r\n        ->setOrder($order);\r\n\r\nCreate order to InkRouter\r\n--------------\r\nAfter creating the instance of InkRouter Models_OrderInfo Create Order to InkRouter as below:\r\n\r\n    try {\r\n        $orderId = $InkRouterClient->createOrder($timestamp, $orderInfo);\r\n    } catch (InkRouter_Exceptions_Exception $e) {\r\n        echo 'Create operation failed';\r\n    }\r\n    \r\n\r\nWhere:\r\n\r\n- `$timestamp` is unix timestamp (result of mktime() function), if your last operation was unsuccessful, you can resend it with same timestamp\r\n- `$orderInfo` is an instance of InkRouter_Models_OrderInfo (see example)\r\n- `$orderId` is an order identification, received from InkRouter\r\n\r\nUpdate order\r\n------------\r\nYou should first create instance of InkRouter Models OrderInfo and call update method:\r\n\r\n    try {\r\n        $InkRouterClient->updateOrder($orderId, $timestamp, $orderInfo);\r\n    } catch (InkRouter_Exceptions_Exception $e) {\r\n        echo 'Update operation failed';\r\n    }            \r\n    \r\nWhere:\r\n\r\n- `$orderId` is identifier of order for update\r\n\r\nPlace on hold order\r\n-------------------\r\nFor place on hold order with id `$orderId` you should do:\r\n    \r\n    try {\r\n        $InkRouterClient->placeOnHold($orderId, $timestamp);\r\n    } catch (InkRouter_Exceptions_Exception $e) {\r\n        echo 'Place on hold operation failed';\r\n    }  \r\n\r\nRemove hold order\r\n-----------------\r\nFor remove order from hold with id `$orderId` you should do:\r\n\r\n    try {\r\n        $InkRouterClient->removeHold($orderId, $timestamp);\r\n    } catch (InkRouter_Exceptions_Exception $e) {\r\n        echo 'Remove hold operation failed';\r\n    }\r\n\r\nCancel order\r\n-----------------\r\nFor cancel order with id `$orderId` you should do:\r\n\r\n    try {\r\n        $InkRouterClient->cancelOrder($orderId, $timestamp);\r\n    } catch (InkRouter_Exceptions_Exception $e) {\r\n        echo 'Cancel operation failed';\r\n    }\r\n\r\nReceive order updates from InkRouter\r\n--------------------------\r\nFor successful receiving update messages from InkRouter, you should make any controller, which can receive post requests, add url of this controller in your account through InkRouter-dashboard. Then you can use InkRouter_Response_Response class for parsing xml string from post content:\r\n\r\n    $updates = InkRouter_Response_Response::fromPack($xml)->getUpdates();\r\n\r\nwhere `$updates` is array of InkRouter_Response_Update objects and you can use it as you want.\r\n\r\n","google":"UA-52338717-1","note":"Don't delete this file! It's used internally to help with page regeneration."}